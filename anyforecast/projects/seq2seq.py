import dataclasses

from anyforecast.backend import BackendExecutor, LocalBackend
from anyforecast.callbacks import Callback
from anyforecast.projects import base


@dataclasses.dataclass
class Seq2SeqParams:
    """Parameters for Seq2Seq.

    Parameters
    ----------
    group_ids : str
        [Comma separated] Column names identifying a time series.

    datetime : str, default="datetime"
        Datetime column. The ``group_ids`` columns together with
        the ``datetime`` uniquely identify each sample/row.

    target : str, default="target"
        Target column.

    max_epochs : int, default=10
        The number of epochs to train for each :meth:`fit` call. Note that you
        may keyboard-interrupt training at any time.

    verbose : int, default=1
        This parameter controls how much print output is generated by
        the net and its callbacks. By setting this value to 0, e.g. the
        summary scores at the end of each epoch are no longer printed.
    """

    group_cols: str
    datetime: str
    target: str
    time_varying_known: str | None = None
    time_varying_unknown: str | None = None
    static_categoricals: str | None = None
    static_reals: str | None = None
    max_prediction_length: int = 6
    max_encoder_length: int = 24
    freq: str = "D"
    device: str = "cpu"
    max_epochs: int = 10
    verbose: int = 1


class Seq2SeqProject(base.MLFlowProject):
    """Handles end-to-end training and deployment of Seq2Seq model.

    experiment_name : str, default=None
        Name of experiment under which to launch the run.

    experiment_id : str, default=None
        ID of experiment under which to launch the run.

    run_name : str, default=None
        The name to give the MLflow Run associated with the project execution.
        If None, the MLflow Run name is left unset.

    env_manager : str, default=None
        Specify an environment manager to create a new environment for the run
        and install project dependencies within that environment. If
        unspecified, MLflow automatically determines the environment manager to
        use by inspecting files in the project directory.
    """

    def __init__(
        self,
        model_params: Seq2SeqParams,
        tracking_params: base.TrackingParams | None = None,
        callbacks: list[Callback] = (),
        backend_exec: BackendExecutor = LocalBackend(),
    ):
        super().__init__(
            uri="",
            model_params=model_params,
            entry_point="train",
            tracking_params=tracking_params,
            callbacks=callbacks,
            backend_exec=backend_exec,
        )
